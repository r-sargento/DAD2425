package dadkvs.server;

/* these imported classes are generated by the contract */
import dadkvs.DadkvsConsole;
import dadkvs.DadkvsConsoleServiceGrpc;
import dadkvs.DadkvsPaxosServiceGrpc;
import io.grpc.stub.StreamObserver;
import java.util.ArrayList;
import java.util.concurrent.ConcurrentHashMap;

public class DadkvsConsoleServiceImpl extends DadkvsConsoleServiceGrpc.DadkvsConsoleServiceImplBase {
   
    DadkvsPaxosServiceImpl paxosService;

	DadkvsServerState server_state;
	public DadkvsConsoleServiceImpl(DadkvsServerState state, DadkvsPaxosServiceGrpc.DadkvsPaxosServiceStub[] async_paxos_stubs) {
		this.server_state = state;
        this.paxosService = new DadkvsPaxosServiceImpl(state, async_paxos_stubs);
	}

	@Override
	public void setleader(DadkvsConsole.SetLeaderRequest request,
			StreamObserver<DadkvsConsole.SetLeaderReply> responseObserver) {
		// for debug purposes
		System.out.println(request);

		boolean response_value = true;
		this.server_state.i_am_leader = request.getIsleader();

		// for debug purposes
		System.out.println("I am the leader = " + this.server_state.i_am_leader);

		this.server_state.main_loop.wakeup();

		DadkvsConsole.SetLeaderReply response = DadkvsConsole.SetLeaderReply.newBuilder()
				.setIsleaderack(response_value).build();

		responseObserver.onNext(response);
		responseObserver.onCompleted();

        if(server_state.i_am_leader){
            ConcurrentHashMap<GenericRequest, Integer> requests = server_state.getRequests();
            ArrayList<GenericRequest> requestList = new ArrayList<GenericRequest>(requests.keySet());
            for(GenericRequest oldRequest: requestList){
                int value = serializeRequest(oldRequest, oldRequest.getReqid());
                int index = requests.get(oldRequest);
                paxosService.startPaxosInstance(index, value);
            }
        }
	}

	@Override
    public void setdebug(DadkvsConsole.SetDebugRequest request, StreamObserver<DadkvsConsole.SetDebugReply> responseObserver) {
        System.out.println(request);
        int mode = request.getMode();
        boolean response_value = true;

        switch (mode) {
            case 1:
                // debugmode1: Crash the server
                System.out.println("Debug Mode 1: Crashing the server.");
                System.exit(1);
                break;

            case 2:
                // debugmode2: Freeze the server (block all client requests)
                System.out.println("Debug Mode 2: Freezing the server.");
				server_state.setFreezeLock(true);
                break;

            case 3:
                // debugmode3: Un-freeze the server (resume handling client requests)
                System.out.println("Debug Mode 3: Un-freezing the server.");
				server_state.setFreezeLock(false);
                break;

            case 4:
                // debugmode4: Slow-mode on (apply random delays)
                System.out.println("Debug Mode 4: Turning slow mode ON.");
                server_state.setSlowMode(true);
                break;

            case 5:
                // debugmode5: Slow-mode off (remove random delays)
                System.out.println("Debug Mode 5: Turning slow mode OFF.");
                server_state.setSlowMode(false);
                break;

            default:
                System.out.println("Unknown debug mode: " + mode);
                response_value = false;
        }

        this.server_state.debug_mode = mode;
        this.server_state.main_loop.wakeup();

        DadkvsConsole.SetDebugReply response = DadkvsConsole.SetDebugReply.newBuilder()
                .setAck(response_value).build();

        responseObserver.onNext(response);
        responseObserver.onCompleted();
    }

    private int serializeRequest(GenericRequest request, int reqid) {
		int requestType = request.getRead_request() != null ? 0 : 1; // 0 for read, 1 for commit

		// Combine request type and ID into a single integer
		// Use the first bit for request type, and the remaining 31 bits for the ID
		return (requestType << 31) | reqid;
	}

}
