package dadkvs.server;

import com.google.common.collect.Iterators;
import com.google.protobuf.Empty;

/* these imported classes are generated by the contract */
import dadkvs.DadkvsMain;
import dadkvs.DadkvsMain.LeaderRequest;
import dadkvs.DadkvsMain.LeaderRequest.Builder;
import dadkvs.DadkvsMain.LeaderResponse;
import dadkvs.DadkvsMainServiceGrpc;
import dadkvs.util.CollectorStreamObserver;
import dadkvs.util.GenericResponseCollector;
import dadkvs.util.LeaderResponseObserver;
import io.grpc.stub.StreamObserver;
import io.grpc.Context;
import java.util.TreeSet;
import java.util.Iterator;
import java.util.ArrayList;

import com.google.protobuf.Empty;

public class DadkvsMainServiceImpl extends DadkvsMainServiceGrpc.DadkvsMainServiceImplBase {

	DadkvsServerState server_state;
	static int timestamp;
	int seqNumber;
	DadkvsMainServiceGrpc.DadkvsMainServiceStub[] async_stubs;

	public DadkvsMainServiceImpl(DadkvsServerState state, DadkvsMainServiceGrpc.DadkvsMainServiceStub[] async_stubs) {
		this.server_state = state;
		timestamp = 0;
		this.seqNumber = 0;
		this.async_stubs = async_stubs;
	}

	@Override
	public void read(DadkvsMain.ReadRequest request, StreamObserver<DadkvsMain.ReadReply> responseObserver) {
		// for debug purposes
		System.out.println("Receiving read request:" + request);
		int reqid = request.getReqid();
		int key = request.getKey();

		if(server_state.i_am_leader){
			
			VersionedValue vv = this.server_state.store.read(key);

			DadkvsMain.ReadReply response = DadkvsMain.ReadReply.newBuilder()
            	.setReqid(reqid)
            	.setValue(vv.getValue())
            	.setTimestamp(vv.getVersion())
            	.build();

			Context ctx = Context.current().fork();

			ctx.run(() -> {
				// Can start asynchronous work here that will not
				// be cancelled when myRpcMethod returns
				fowardSequence(reqid);
			  });

			responseObserver.onNext(response);
			responseObserver.onCompleted();

		}
		else{
			this.server_state.addRequest(request, responseObserver);
			loopResponse(server_state);			
		}
	}

	private void fowardSequence(int reqid){
		DadkvsMain.LeaderRequest leaderRequest = DadkvsMain.LeaderRequest.newBuilder()
                .setReqid(reqid)
                .setSeqnumber(this.seqNumber).build();
        	this.seqNumber++;
		
		for (int i = 0; i < 4; i++) {
			System.out.println(i);
			
			// Send the request using the async stub
			if (!Context.current().isCancelled()) {
				async_stubs[i].leaderSequence(leaderRequest, new LeaderResponseObserver(i));
			} else {
				System.err.println("Context was cancelled, skipping request for replica " + i);
			}
		}
	}

	@Override
	public void committx(DadkvsMain.CommitRequest request, StreamObserver<DadkvsMain.CommitReply> responseObserver) {
		// for debug purposes

		if(server_state.i_am_leader){
			System.out.println("Receiving commit request:" + request);

			int reqid = request.getReqid();
			int key1 = request.getKey1();
			int version1 = request.getVersion1();
			int key2 = request.getKey2();
			int version2 = request.getVersion2();
			int writekey = request.getWritekey();
			int writeval = request.getWriteval();

			// for debug purposes
			System.out.println("reqid " + reqid + " key1 " + key1 + " v1 " + version1 + " k2 " + key2 + " v2 " + version2
					+ " wk " + writekey + " writeval " + writeval);

			timestamp++;
			TransactionRecord txrecord = new TransactionRecord(key1, version1, key2, version2, writekey, writeval,
					timestamp);
			boolean result = this.server_state.store.commit(txrecord);

			// for debug purposes
			System.out.println("Result is ready for request with reqid " + reqid);

			DadkvsMain.CommitReply response = DadkvsMain.CommitReply.newBuilder()
					.setReqid(reqid).setAck(result).build();

			Context ctx = Context.current().fork();

			ctx.run(() -> {
				// Can start asynchronous work here that will not
				// be cancelled when myRpcMethod returns
				fowardSequence(reqid);
				});

			responseObserver.onNext(response);
			responseObserver.onCompleted();
		}
		else{
			this.server_state.addRequest(request, responseObserver);
			loopResponse(server_state);			
		}
	}

	@Override
	public void leaderSequence(DadkvsMain.LeaderRequest request, StreamObserver<LeaderResponse> responseObserver) {
		// for debug purposes
		System.out.println("Received LeaderRequest: reqid=" + request.getReqid() + ", seqnumber=" + request.getSeqnumber());
		server_state.addSequenceID(request.getReqid(),request.getSeqnumber());
		// Send the reply back to the caller
		LeaderResponse response = LeaderResponse.newBuilder().build();
        responseObserver.onNext(response);
		responseObserver.onCompleted();
		loopResponse(server_state);
	}

	private synchronized static void loopResponse(DadkvsServerState server_state){
		System.out.println("PRIMEIRO");
		System.out.println(server_state.getSequence());
		TreeSet<SequencedID> sequence = server_state.getSequence();
		Iterator<SequencedID> sequenceIterator = sequence.iterator();
		while (sequenceIterator.hasNext()){
			SequencedID id = sequenceIterator.next();
			if(id.get_seqID() != server_state.getCurrentID()){
				return;
			}
			int reqId = id.get_reqID();
			ArrayList<GenericRequest> requests = server_state.getRequests();
			Iterator<GenericRequest> rquestsIterator = requests.iterator();
			while (rquestsIterator.hasNext()){
				GenericRequest request = rquestsIterator.next();
				if(request.getRead_request() != null && request.getRead_request().getReqid() == reqId){
					int key = request.getRead_request().getKey();
					VersionedValue vv = server_state.store.read(key);

					DadkvsMain.ReadReply response = DadkvsMain.ReadReply.newBuilder()
						.setReqid(reqId)
						.setValue(vv.getValue())
						.setTimestamp(vv.getVersion())
						.build();
					
					sequenceIterator.remove();
					rquestsIterator.remove();
					
					System.out.println("ENVIEI READ");
					request.getResponseObserver().onNext(response);
					request.getResponseObserver().onCompleted();
					server_state.IncrementCurrentID();
					break;
				}
				else if (request.getCommit_request() != null && request.getCommit_request().getReqid() == reqId){
					int reqid = request.getCommit_request().getReqid();
					int key1 = request.getCommit_request().getKey1();
					int version1 = request.getCommit_request().getVersion1();
					int key2 = request.getCommit_request().getKey2();
					int version2 = request.getCommit_request().getVersion2();
					int writekey = request.getCommit_request().getWritekey();
					int writeval = request.getCommit_request().getWriteval();

					// for debug purposes
					/* 					System.out.println("reqid " + reqid + " key1 " + key1 + " v1 " + version1 + " k2 " + key2 + " v2 " + version2
							+ " wk " + writekey + " writeval " + writeval); */

					timestamp++;
					TransactionRecord txrecord = new TransactionRecord(key1, version1, key2, version2, writekey, writeval,
							timestamp);
					boolean result = server_state.store.commit(txrecord);

					// for debug purposes
					/* System.out.println("Result is ready for request with reqid " + reqid); */

					DadkvsMain.CommitReply response = DadkvsMain.CommitReply.newBuilder()
							.setReqid(reqid).setAck(result).build();

					sequenceIterator.remove();
					rquestsIterator.remove();
					System.out.println("ENVIEI WRITE");
					request.getCommit_responseObserver().onNext(response);
					request.getCommit_responseObserver().onCompleted();
					server_state.IncrementCurrentID();
				}	
			}
			server_state.setSequence(sequence);
			server_state.setRequests(requests);
			System.out.println("SEGUNDO");
			System.out.println(server_state.getSequence());
		}
	}
}
